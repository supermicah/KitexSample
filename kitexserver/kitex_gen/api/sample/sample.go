// Code generated by Kitex v0.7.3. DO NOT EDIT.

package sample

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "kitexserver/kitex_gen/api"
	dragon "kitexserver/kitex_gen/dragon"
)

func serviceInfo() *kitex.ServiceInfo {
	return sampleServiceInfo
}

var sampleServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Sample"
	handlerType := (*api.Sample)(nil)
	methods := map[string]kitex.MethodInfo{
		"dragonSay": kitex.NewMethodInfo(dragonSayHandler, newSampleDragonSayArgs, newSampleDragonSayResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "api",
		"ServiceFilePath": `thrift/sample_service.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func dragonSayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.SampleDragonSayArgs)
	realResult := result.(*api.SampleDragonSayResult)
	success, err := handler.(api.Sample).DragonSay(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSampleDragonSayArgs() interface{} {
	return api.NewSampleDragonSayArgs()
}

func newSampleDragonSayResult() interface{} {
	return api.NewSampleDragonSayResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DragonSay(ctx context.Context, req *dragon.DragonSayRequest) (r *dragon.DragonSayResponse, err error) {
	var _args api.SampleDragonSayArgs
	_args.Req = req
	var _result api.SampleDragonSayResult
	if err = p.c.Call(ctx, "dragonSay", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
